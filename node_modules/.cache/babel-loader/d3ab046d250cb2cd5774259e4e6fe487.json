{"ast":null,"code":"import _slicedToArray from \"/home/ngarci12/Desktop/material-dashboard-pro-react-v1/material-dashboard-pro-react-v1/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/ngarci12/Desktop/material-dashboard-pro-react-v1/material-dashboard-pro-react-v1/src/views/Forms/ValidationForms.js\";\n\n/*eslint-disable*/\nimport React from \"react\"; // @material-ui/core components\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\"; // material ui icons\n\nimport MailOutline from \"@material-ui/icons/MailOutline\";\nimport Contacts from \"@material-ui/icons/Contacts\";\nimport Check from \"@material-ui/icons/Check\";\nimport Close from \"@material-ui/icons/Close\"; // core components\n\nimport GridContainer from \"components/Grid/GridContainer.js\";\nimport GridItem from \"components/Grid/GridItem.js\";\nimport CustomInput from \"components/CustomInput/CustomInput.js\";\nimport Button from \"components/CustomButtons/Button.js\";\nimport Card from \"components/Card/Card.js\";\nimport CardHeader from \"components/Card/CardHeader.js\";\nimport CardText from \"components/Card/CardText.js\";\nimport CardIcon from \"components/Card/CardIcon.js\";\nimport CardBody from \"components/Card/CardBody.js\";\nimport CardFooter from \"components/Card/CardFooter.js\"; // style for this view\n\nimport styles from \"assets/jss/material-dashboard-pro-react/views/validationFormsStyle.js\";\nvar useStyles = makeStyles(styles);\nexport default function ValidationForms() {\n  // register form\n  var _React$useState = React.useState(\"\"),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      registerEmail = _React$useState2[0],\n      setregisterEmail = _React$useState2[1];\n\n  var _React$useState3 = React.useState(\"\"),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      registerEmailState = _React$useState4[0],\n      setregisterEmailState = _React$useState4[1];\n\n  var _React$useState5 = React.useState(\"\"),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      registerPassword = _React$useState6[0],\n      setregisterPassword = _React$useState6[1];\n\n  var _React$useState7 = React.useState(\"\"),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      registerPasswordState = _React$useState8[0],\n      setregisterPasswordState = _React$useState8[1];\n\n  var _React$useState9 = React.useState(\"\"),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      registerConfirmPassword = _React$useState10[0],\n      setregisterConfirmPassword = _React$useState10[1];\n\n  var _React$useState11 = React.useState(\"\"),\n      _React$useState12 = _slicedToArray(_React$useState11, 2),\n      registerConfirmPasswordState = _React$useState12[0],\n      setregisterConfirmPasswordState = _React$useState12[1];\n\n  var _React$useState13 = React.useState(false),\n      _React$useState14 = _slicedToArray(_React$useState13, 2),\n      registerCheckbox = _React$useState14[0],\n      setregisterCheckbox = _React$useState14[1];\n\n  var _React$useState15 = React.useState(\"\"),\n      _React$useState16 = _slicedToArray(_React$useState15, 2),\n      registerCheckboxState = _React$useState16[0],\n      setregisterCheckboxState = _React$useState16[1]; // login form\n\n\n  var _React$useState17 = React.useState(\"\"),\n      _React$useState18 = _slicedToArray(_React$useState17, 2),\n      loginEmail = _React$useState18[0],\n      setloginEmail = _React$useState18[1];\n\n  var _React$useState19 = React.useState(\"\"),\n      _React$useState20 = _slicedToArray(_React$useState19, 2),\n      loginEmailState = _React$useState20[0],\n      setloginEmailState = _React$useState20[1];\n\n  var _React$useState21 = React.useState(\"\"),\n      _React$useState22 = _slicedToArray(_React$useState21, 2),\n      loginPassword = _React$useState22[0],\n      setloginPassword = _React$useState22[1];\n\n  var _React$useState23 = React.useState(\"\"),\n      _React$useState24 = _slicedToArray(_React$useState23, 2),\n      loginPasswordState = _React$useState24[0],\n      setloginPasswordState = _React$useState24[1]; // type validation\n\n\n  var _React$useState25 = React.useState(\"\"),\n      _React$useState26 = _slicedToArray(_React$useState25, 2),\n      required = _React$useState26[0],\n      setrequired = _React$useState26[1];\n\n  var _React$useState27 = React.useState(\"\"),\n      _React$useState28 = _slicedToArray(_React$useState27, 2),\n      requiredState = _React$useState28[0],\n      setrequiredState = _React$useState28[1];\n\n  var _React$useState29 = React.useState(\"\"),\n      _React$useState30 = _slicedToArray(_React$useState29, 2),\n      typeEmail = _React$useState30[0],\n      settypeEmail = _React$useState30[1];\n\n  var _React$useState31 = React.useState(\"\"),\n      _React$useState32 = _slicedToArray(_React$useState31, 2),\n      typeEmailState = _React$useState32[0],\n      settypeEmailState = _React$useState32[1];\n\n  var _React$useState33 = React.useState(\"\"),\n      _React$useState34 = _slicedToArray(_React$useState33, 2),\n      number = _React$useState34[0],\n      setnumber = _React$useState34[1];\n\n  var _React$useState35 = React.useState(\"\"),\n      _React$useState36 = _slicedToArray(_React$useState35, 2),\n      numberState = _React$useState36[0],\n      setnumberState = _React$useState36[1];\n\n  var _React$useState37 = React.useState(\"\"),\n      _React$useState38 = _slicedToArray(_React$useState37, 2),\n      url = _React$useState38[0],\n      seturl = _React$useState38[1];\n\n  var _React$useState39 = React.useState(\"\"),\n      _React$useState40 = _slicedToArray(_React$useState39, 2),\n      urlState = _React$useState40[0],\n      seturlState = _React$useState40[1];\n\n  var _React$useState41 = React.useState(\"\"),\n      _React$useState42 = _slicedToArray(_React$useState41, 2),\n      equalTo = _React$useState42[0],\n      setequalTo = _React$useState42[1];\n\n  var _React$useState43 = React.useState(\"\"),\n      _React$useState44 = _slicedToArray(_React$useState43, 2),\n      whichEqualTo = _React$useState44[0],\n      setwhichEqualTo = _React$useState44[1];\n\n  var _React$useState45 = React.useState(\"\"),\n      _React$useState46 = _slicedToArray(_React$useState45, 2),\n      equalToState = _React$useState46[0],\n      setequalToState = _React$useState46[1]; // range validation\n\n\n  var _React$useState47 = React.useState(\"\"),\n      _React$useState48 = _slicedToArray(_React$useState47, 2),\n      minLength = _React$useState48[0],\n      setminLength = _React$useState48[1];\n\n  var _React$useState49 = React.useState(\"\"),\n      _React$useState50 = _slicedToArray(_React$useState49, 2),\n      minLengthState = _React$useState50[0],\n      setminLengthState = _React$useState50[1];\n\n  var _React$useState51 = React.useState(\"\"),\n      _React$useState52 = _slicedToArray(_React$useState51, 2),\n      maxLength = _React$useState52[0],\n      setmaxLength = _React$useState52[1];\n\n  var _React$useState53 = React.useState(\"\"),\n      _React$useState54 = _slicedToArray(_React$useState53, 2),\n      maxLengthState = _React$useState54[0],\n      setmaxLengthState = _React$useState54[1];\n\n  var _React$useState55 = React.useState(\"\"),\n      _React$useState56 = _slicedToArray(_React$useState55, 2),\n      range = _React$useState56[0],\n      setrange = _React$useState56[1];\n\n  var _React$useState57 = React.useState(\"\"),\n      _React$useState58 = _slicedToArray(_React$useState57, 2),\n      rangeState = _React$useState58[0],\n      setrangeState = _React$useState58[1];\n\n  var _React$useState59 = React.useState(\"\"),\n      _React$useState60 = _slicedToArray(_React$useState59, 2),\n      minValue = _React$useState60[0],\n      setminValue = _React$useState60[1];\n\n  var _React$useState61 = React.useState(\"\"),\n      _React$useState62 = _slicedToArray(_React$useState61, 2),\n      minValueState = _React$useState62[0],\n      setminValueState = _React$useState62[1];\n\n  var _React$useState63 = React.useState(\"\"),\n      _React$useState64 = _slicedToArray(_React$useState63, 2),\n      maxValue = _React$useState64[0],\n      setmaxValue = _React$useState64[1];\n\n  var _React$useState65 = React.useState(\"\"),\n      _React$useState66 = _slicedToArray(_React$useState65, 2),\n      maxValueState = _React$useState66[0],\n      setmaxValueState = _React$useState66[1]; // function that returns true if value is email, false otherwise\n\n\n  var verifyEmail = function verifyEmail(value) {\n    var emailRex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n    if (emailRex.test(value)) {\n      return true;\n    }\n\n    return false;\n  }; // function that verifies if a string has a given length or not\n\n\n  var verifyLength = function verifyLength(value, length) {\n    if (value.length >= length) {\n      return true;\n    }\n\n    return false;\n  }; // function that verifies if value contains only numbers\n\n\n  var verifyNumber = function verifyNumber(value) {\n    var numberRex = new RegExp(\"^[0-9]+$\");\n\n    if (numberRex.test(value)) {\n      return true;\n    }\n\n    return false;\n  }; // verifies if value is a valid URL\n\n\n  var verifyUrl = function verifyUrl(value) {\n    try {\n      new URL(value);\n      return true;\n    } catch (_) {\n      return false;\n    }\n  };\n\n  var registerClick = function registerClick() {\n    if (registerEmailState === \"\") {\n      setregisterEmailState(\"error\");\n    }\n\n    if (registerPasswordState === \"\") {\n      setregisterPasswordState(\"error\");\n    }\n\n    if (registerConfirmPasswordState === \"\") {\n      setregisterConfirmPasswordState(\"error\");\n    }\n\n    if (registerCheckboxState === \"\") {\n      setregisterCheckboxState(\"error\");\n    }\n  };\n\n  var loginClick = function loginClick() {\n    if (loginEmailState === \"\") {\n      setloginEmailState(\"error\");\n    }\n\n    if (loginPasswordState === \"\") {\n      setloginPasswordState(\"error\");\n    }\n  };\n\n  var typeClick = function typeClick() {\n    if (requiredState === \"\") {\n      setrequiredState(\"error\");\n    }\n\n    if (typeEmailState === \"\") {\n      settypeEmailState(\"error\");\n    }\n\n    if (numberState === \"\") {\n      setnumberState(\"error\");\n    }\n\n    if (urlState === \"\") {\n      seturlState(\"error\");\n    }\n\n    if (equalToState === \"\") {\n      setequalToState(\"error\");\n    }\n  };\n\n  var rangeClick = function rangeClick() {\n    if (minLengthState === \"\") {\n      setminLengthState(\"error\");\n    }\n\n    if (maxLengthState === \"\") {\n      setmaxLengthState(\"error\");\n    }\n\n    if (rangeState === \"\") {\n      setrangeState(\"error\");\n    }\n\n    if (minValueState === \"\") {\n      setminValueState(\"error\");\n    }\n\n    if (maxValueState === \"\") {\n      setmaxValueState(\"error\");\n    }\n  };\n\n  var classes = useStyles();\n  return React.createElement(GridContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, React.createElement(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 6,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }, React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, React.createElement(CardHeader, {\n    color: \"rose\",\n    icon: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, React.createElement(CardIcon, {\n    color: \"rose\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, React.createElement(MailOutline, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  })), React.createElement(\"h4\", {\n    className: classes.cardIconTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, \"Register Forms\")), React.createElement(CardBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, React.createElement(CustomInput, {\n    success: registerEmailState === \"success\",\n    error: registerEmailState === \"error\",\n    labelText: \"Email Address *\",\n    id: \"registeremail\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      onChange: function onChange(event) {\n        if (verifyEmail(event.target.value)) {\n          setregisterEmailState(\"success\");\n        } else {\n          setregisterEmailState(\"error\");\n        }\n\n        setregisterEmail(event.target.value);\n      },\n      type: \"email\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }), React.createElement(CustomInput, {\n    success: registerPasswordState === \"success\",\n    error: registerPasswordState === \"error\",\n    labelText: \"Password *\",\n    id: \"registerpassword\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      onChange: function onChange(event) {\n        if (verifyLength(event.target.value, 1)) {\n          setregisterPasswordState(\"success\");\n        } else {\n          setregisterPasswordState(\"error\");\n        }\n\n        setregisterPassword(event.target.value);\n      },\n      type: \"password\",\n      autoComplete: \"off\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197\n    },\n    __self: this\n  }), React.createElement(CustomInput, {\n    success: registerConfirmPasswordState === \"success\",\n    error: registerConfirmPasswordState === \"error\",\n    labelText: \"Confirm Password *\",\n    id: \"registerconfirmpassword\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      onChange: function onChange(event) {\n        if (registerPassword === event.target.value) {\n          setregisterConfirmPasswordState(\"success\");\n        } else {\n          setregisterConfirmPasswordState(\"error\");\n        }\n\n        setregisterConfirmPassword(event.target.value);\n      },\n      type: \"password\",\n      autoComplete: \"off\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: classes.formCategory,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239\n    },\n    __self: this\n  }, React.createElement(\"small\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240\n    },\n    __self: this\n  }, \"*\"), \" Required fields\"), React.createElement(FormControlLabel, {\n    control: React.createElement(Checkbox, {\n      tabIndex: -1,\n      onClick: function onClick(event) {\n        if (event.target.checked) {\n          setregisterCheckboxState(\"success\");\n        } else {\n          setregisterCheckboxState(\"error\");\n        }\n\n        setregisterCheckbox(event.target.checked);\n      },\n      checkedIcon: React.createElement(Check, {\n        className: classes.checkedIcon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        },\n        __self: this\n      }),\n      icon: React.createElement(Check, {\n        className: classes.uncheckedIcon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255\n        },\n        __self: this\n      }),\n      classes: {\n        checked: classes.checked,\n        root: classes.checkRoot\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }),\n    classes: {\n      label: classes.label + (registerCheckboxState === \"error\" ? \" \" + classes.labelError : \"\")\n    },\n    label: \"Subscribe to newsletter\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242\n    },\n    __self: this\n  }), React.createElement(Button, {\n    color: \"rose\",\n    onClick: registerClick,\n    className: classes.registerButton,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271\n    },\n    __self: this\n  }, \"Register\"))))), React.createElement(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 6,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282\n    },\n    __self: this\n  }, React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283\n    },\n    __self: this\n  }, React.createElement(CardHeader, {\n    color: \"rose\",\n    icon: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284\n    },\n    __self: this\n  }, React.createElement(CardIcon, {\n    color: \"rose\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285\n    },\n    __self: this\n  }, React.createElement(Contacts, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286\n    },\n    __self: this\n  })), React.createElement(\"h4\", {\n    className: classes.cardIconTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288\n    },\n    __self: this\n  }, \"Login Form\")), React.createElement(CardBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291\n    },\n    __self: this\n  }, React.createElement(CustomInput, {\n    success: loginEmailState === \"success\",\n    error: loginEmailState === \"error\",\n    labelText: \"Email Address *\",\n    id: \"loginemail\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      onChange: function onChange(event) {\n        if (verifyEmail(event.target.value)) {\n          setloginEmailState(\"success\");\n        } else {\n          setloginEmailState(\"error\");\n        }\n\n        setloginEmail(event.target.value);\n      },\n      type: \"email\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292\n    },\n    __self: this\n  }), React.createElement(CustomInput, {\n    success: loginPasswordState === \"success\",\n    error: loginPasswordState === \"error\",\n    labelText: \"Password *\",\n    id: \"loginpassword\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      onChange: function onChange(event) {\n        if (verifyLength(event.target.value, 1)) {\n          setloginPasswordState(\"success\");\n        } else {\n          setloginPasswordState(\"error\");\n        }\n\n        setloginPassword(event.target.value);\n      },\n      type: \"password\",\n      autoComplete: \"off\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: classes.formCategory,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333\n    },\n    __self: this\n  }, React.createElement(\"small\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334\n    },\n    __self: this\n  }, \"*\"), \" Required fields\"), React.createElement(\"div\", {\n    className: classes.center,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336\n    },\n    __self: this\n  }, React.createElement(Button, {\n    color: \"rose\",\n    onClick: loginClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337\n    },\n    __self: this\n  }, \"Login\")))))), React.createElement(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345\n    },\n    __self: this\n  }, React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 346\n    },\n    __self: this\n  }, React.createElement(CardHeader, {\n    color: \"rose\",\n    text: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 347\n    },\n    __self: this\n  }, React.createElement(CardText, {\n    color: \"rose\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 348\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    className: classes.cardTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 349\n    },\n    __self: this\n  }, \"Type Validation\"))), React.createElement(CardBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 352\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353\n    },\n    __self: this\n  }, React.createElement(GridContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354\n    },\n    __self: this\n  }, React.createElement(GridItem, {\n    xs: 12,\n    sm: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355\n    },\n    __self: this\n  }, React.createElement(FormLabel, {\n    className: classes.labelHorizontal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356\n    },\n    __self: this\n  }, \"Required Text\")), React.createElement(GridItem, {\n    xs: 12,\n    sm: 7,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 360\n    },\n    __self: this\n  }, React.createElement(CustomInput, {\n    success: requiredState === \"success\",\n    error: requiredState === \"error\",\n    id: \"required\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      onChange: function onChange(event) {\n        if (verifyLength(event.target.value, 0)) {\n          setrequiredState(\"success\");\n        } else {\n          setrequiredState(\"error\");\n        }\n\n        setrequired(event.target.value);\n      },\n      type: \"text\",\n      endAdornment: requiredState === \"error\" ? React.createElement(InputAdornment, {\n        position: \"end\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 380\n        },\n        __self: this\n      }, React.createElement(Close, {\n        className: classes.danger,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 381\n        },\n        __self: this\n      })) : undefined\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 361\n    },\n    __self: this\n  })), React.createElement(GridItem, {\n    xs: 12,\n    sm: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 389\n    },\n    __self: this\n  }, React.createElement(FormLabel, {\n    className: classes.labelLeftHorizontal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 390\n    },\n    __self: this\n  }, React.createElement(\"code\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 391\n    },\n    __self: this\n  }, \"required\")))), React.createElement(GridContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 395\n    },\n    __self: this\n  }, React.createElement(GridItem, {\n    xs: 12,\n    sm: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 396\n    },\n    __self: this\n  }, React.createElement(FormLabel, {\n    className: classes.labelHorizontal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 397\n    },\n    __self: this\n  }, \"Email\")), React.createElement(GridItem, {\n    xs: 12,\n    sm: 7,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 401\n    },\n    __self: this\n  }, React.createElement(CustomInput, {\n    success: typeEmailState === \"success\",\n    error: typeEmailState === \"error\",\n    id: \"typeemail\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      onChange: function onChange(event) {\n        if (verifyEmail(event.target.value)) {\n          settypeEmailState(\"success\");\n        } else {\n          settypeEmailState(\"error\");\n        }\n\n        settypeEmail(event.target.value);\n      },\n      type: \"email\",\n      endAdornment: typeEmailState === \"error\" ? React.createElement(InputAdornment, {\n        position: \"end\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 421\n        },\n        __self: this\n      }, React.createElement(Close, {\n        className: classes.danger,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 422\n        },\n        __self: this\n      })) : undefined\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 402\n    },\n    __self: this\n  })), React.createElement(GridItem, {\n    xs: 12,\n    sm: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 430\n    },\n    __self: this\n  }, React.createElement(FormLabel, {\n    className: classes.labelLeftHorizontal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 431\n    },\n    __self: this\n  }, React.createElement(\"code\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 432\n    },\n    __self: this\n  }, \"email\")))), React.createElement(GridContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 436\n    },\n    __self: this\n  }, React.createElement(GridItem, {\n    xs: 12,\n    sm: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 437\n    },\n    __self: this\n  }, React.createElement(FormLabel, {\n    className: classes.labelHorizontal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 438\n    },\n    __self: this\n  }, \"Number\")), React.createElement(GridItem, {\n    xs: 12,\n    sm: 7,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 442\n    },\n    __self: this\n  }, React.createElement(CustomInput, {\n    success: numberState === \"success\",\n    error: numberState === \"error\",\n    id: \"number\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      onChange: function onChange(event) {\n        if (verifyNumber(event.target.value)) {\n          setnumberState(\"success\");\n        } else {\n          setnumberState(\"error\");\n        }\n\n        setnumber(event.target.value);\n      },\n      type: \"number\",\n      endAdornment: numberState === \"error\" ? React.createElement(InputAdornment, {\n        position: \"end\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 462\n        },\n        __self: this\n      }, React.createElement(Close, {\n        className: classes.danger,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 463\n        },\n        __self: this\n      })) : undefined\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 443\n    },\n    __self: this\n  })), React.createElement(GridItem, {\n    xs: 12,\n    sm: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 471\n    },\n    __self: this\n  }, React.createElement(FormLabel, {\n    className: classes.labelLeftHorizontal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 472\n    },\n    __self: this\n  }, React.createElement(\"code\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 473\n    },\n    __self: this\n  }, \"number\")))), React.createElement(GridContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 477\n    },\n    __self: this\n  }, React.createElement(GridItem, {\n    xs: 12,\n    sm: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 478\n    },\n    __self: this\n  }, React.createElement(FormLabel, {\n    className: classes.labelHorizontal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 479\n    },\n    __self: this\n  }, \"Url\")), React.createElement(GridItem, {\n    xs: 12,\n    sm: 7,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 481\n    },\n    __self: this\n  }, React.createElement(CustomInput, {\n    success: urlState === \"success\",\n    error: urlState === \"error\",\n    id: \"url\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      onChange: function onChange(event) {\n        if (verifyUrl(event.target.value)) {\n          seturlState(\"success\");\n        } else {\n          seturlState(\"error\");\n        }\n\n        seturl(event.target.value);\n      },\n      type: \"text\",\n      endAdornment: urlState === \"error\" ? React.createElement(InputAdornment, {\n        position: \"end\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 501\n        },\n        __self: this\n      }, React.createElement(Close, {\n        className: classes.danger,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 502\n        },\n        __self: this\n      })) : undefined\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 482\n    },\n    __self: this\n  })), React.createElement(GridItem, {\n    xs: 12,\n    sm: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 510\n    },\n    __self: this\n  }, React.createElement(FormLabel, {\n    className: classes.labelLeftHorizontal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 511\n    },\n    __self: this\n  }, React.createElement(\"code\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 512\n    },\n    __self: this\n  }, \"url\")))), React.createElement(GridContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 516\n    },\n    __self: this\n  }, React.createElement(GridItem, {\n    xs: 12,\n    sm: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 517\n    },\n    __self: this\n  }, React.createElement(FormLabel, {\n    className: classes.labelHorizontal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 518\n    },\n    __self: this\n  }, \"Equal to\")), React.createElement(GridItem, {\n    xs: 12,\n    sm: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 522\n    },\n    __self: this\n  }, React.createElement(CustomInput, {\n    success: equalToState === \"success\",\n    error: equalToState === \"error\",\n    id: \"equalto\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      onChange: function onChange(event) {\n        return setequalTo(event.target.value);\n      },\n      type: \"text\",\n      endAdornment: equalToState === \"error\" ? React.createElement(InputAdornment, {\n        position: \"end\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 535\n        },\n        __self: this\n      }, React.createElement(Close, {\n        className: classes.danger,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 536\n        },\n        __self: this\n      })) : undefined\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 523\n    },\n    __self: this\n  })), React.createElement(GridItem, {\n    xs: 12,\n    sm: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 544\n    },\n    __self: this\n  }, React.createElement(CustomInput, {\n    success: equalToState === \"success\",\n    error: equalToState === \"error\",\n    id: \"whichequalto\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      onChange: function onChange(event) {\n        if (equalTo === event.target.value) {\n          setequalToState(\"success\");\n        } else {\n          setequalToState(\"error\");\n        }\n\n        setwhichEqualTo(event.target.value);\n      },\n      type: \"text\",\n      endAdornment: equalToState === \"error\" ? React.createElement(InputAdornment, {\n        position: \"end\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 564\n        },\n        __self: this\n      }, React.createElement(Close, {\n        className: classes.danger,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 565\n        },\n        __self: this\n      })) : undefined\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 545\n    },\n    __self: this\n  })), React.createElement(GridItem, {\n    xs: 12,\n    sm: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 573\n    },\n    __self: this\n  }, React.createElement(FormLabel, {\n    className: classes.labelLeftHorizontal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 574\n    },\n    __self: this\n  }, React.createElement(\"code\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 575\n    },\n    __self: this\n  }, \"equalTo\")))))), React.createElement(CardFooter, {\n    className: classes.justifyContentCenter,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 581\n    },\n    __self: this\n  }, React.createElement(Button, {\n    color: \"rose\",\n    onClick: typeClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 582\n    },\n    __self: this\n  }, \"Validate Inputs\")))), React.createElement(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 588\n    },\n    __self: this\n  }, React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 589\n    },\n    __self: this\n  }, React.createElement(CardHeader, {\n    color: \"rose\",\n    text: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 590\n    },\n    __self: this\n  }, React.createElement(CardText, {\n    color: \"rose\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 591\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    className: classes.cardTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 592\n    },\n    __self: this\n  }, \"Range Validation\"))), React.createElement(CardBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 595\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 596\n    },\n    __self: this\n  }, React.createElement(GridContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 597\n    },\n    __self: this\n  }, React.createElement(GridItem, {\n    xs: 12,\n    sm: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 598\n    },\n    __self: this\n  }, React.createElement(FormLabel, {\n    className: classes.labelHorizontal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 599\n    },\n    __self: this\n  }, \"Min Length\")), React.createElement(GridItem, {\n    xs: 12,\n    sm: 7,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 603\n    },\n    __self: this\n  }, React.createElement(CustomInput, {\n    success: minLengthState === \"success\",\n    error: minLengthState === \"error\",\n    id: \"minlength\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      onChange: function onChange(event) {\n        if (verifyLength(event.target.value, 5)) {\n          setminLengthState(\"success\");\n        } else {\n          setminLengthState(\"error\");\n        }\n\n        setminLength(event.target.value);\n      },\n      type: \"text\",\n      endAdornment: minLengthState === \"error\" ? React.createElement(InputAdornment, {\n        position: \"end\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 623\n        },\n        __self: this\n      }, React.createElement(Close, {\n        className: classes.danger,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 624\n        },\n        __self: this\n      })) : undefined\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 604\n    },\n    __self: this\n  })), React.createElement(GridItem, {\n    xs: 12,\n    sm: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 632\n    },\n    __self: this\n  }, React.createElement(FormLabel, {\n    className: classes.labelLeftHorizontal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 633\n    },\n    __self: this\n  }, React.createElement(\"code\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 634\n    },\n    __self: this\n  }, \"minLength=\", '\"', \"5\", '\"'))), React.createElement(GridItem, {\n    xs: 12,\n    sm: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 639\n    },\n    __self: this\n  }, React.createElement(FormLabel, {\n    className: classes.labelHorizontal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 640\n    },\n    __self: this\n  }, \"Max Length\")), React.createElement(GridItem, {\n    xs: 12,\n    sm: 7,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 644\n    },\n    __self: this\n  }, React.createElement(CustomInput, {\n    success: maxLengthState === \"success\",\n    error: maxLengthState === \"error\",\n    id: \"maxlength\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      onChange: function onChange(event) {\n        if (!verifyLength(event.target.value, 6)) {\n          setmaxLengthState(\"success\");\n        } else {\n          setmaxLengthState(\"error\");\n        }\n\n        setmaxLength(event.target.value);\n      },\n      type: \"text\",\n      endAdornment: maxLengthState === \"error\" ? React.createElement(InputAdornment, {\n        position: \"end\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 664\n        },\n        __self: this\n      }, React.createElement(Close, {\n        className: classes.danger,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 665\n        },\n        __self: this\n      })) : undefined\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 645\n    },\n    __self: this\n  })), React.createElement(GridItem, {\n    xs: 12,\n    sm: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 673\n    },\n    __self: this\n  }, React.createElement(FormLabel, {\n    className: classes.labelLeftHorizontal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 674\n    },\n    __self: this\n  }, React.createElement(\"code\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 675\n    },\n    __self: this\n  }, \"maxLength=\", '\"', \"5\", '\"'))), React.createElement(GridItem, {\n    xs: 12,\n    sm: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 680\n    },\n    __self: this\n  }, React.createElement(FormLabel, {\n    className: classes.labelHorizontal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 681\n    },\n    __self: this\n  }, \"Range\")), React.createElement(GridItem, {\n    xs: 12,\n    sm: 7,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 685\n    },\n    __self: this\n  }, React.createElement(CustomInput, {\n    success: rangeState === \"success\",\n    error: rangeState === \"error\",\n    id: \"range\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      onChange: function onChange(event) {\n        if (verifyNumber(event.target.value) && event.target.value >= 6 && event.target.value <= 10) {\n          setrangeState(\"success\");\n        } else {\n          setrangeState(\"error\");\n        }\n\n        setrange(event.target.value);\n      },\n      type: \"text\",\n      endAdornment: rangeState === \"error\" ? React.createElement(InputAdornment, {\n        position: \"end\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 709\n        },\n        __self: this\n      }, React.createElement(Close, {\n        className: classes.danger,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 710\n        },\n        __self: this\n      })) : undefined\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 686\n    },\n    __self: this\n  })), React.createElement(GridItem, {\n    xs: 12,\n    sm: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 718\n    },\n    __self: this\n  }, React.createElement(FormLabel, {\n    className: classes.labelLeftHorizontal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 719\n    },\n    __self: this\n  }, React.createElement(\"code\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 720\n    },\n    __self: this\n  }, \"range=\", '\"', \"[6,10]\", '\"'))), React.createElement(GridItem, {\n    xs: 12,\n    sm: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 725\n    },\n    __self: this\n  }, React.createElement(FormLabel, {\n    className: classes.labelHorizontal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 726\n    },\n    __self: this\n  }, \"Min Value\")), React.createElement(GridItem, {\n    xs: 12,\n    sm: 7,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 730\n    },\n    __self: this\n  }, React.createElement(CustomInput, {\n    success: minValueState === \"success\",\n    error: minValueState === \"error\",\n    id: \"minvalue\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      onChange: function onChange(event) {\n        if (verifyNumber(event.target.value) && event.target.value >= 6) {\n          setminValueState(\"success\");\n        } else {\n          setminValueState(\"error\");\n        }\n\n        setminValue(event.target.value);\n      },\n      type: \"text\",\n      endAdornment: minValueState === \"error\" ? React.createElement(InputAdornment, {\n        position: \"end\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 753\n        },\n        __self: this\n      }, React.createElement(Close, {\n        className: classes.danger,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 754\n        },\n        __self: this\n      })) : undefined\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 731\n    },\n    __self: this\n  })), React.createElement(GridItem, {\n    xs: 12,\n    sm: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 762\n    },\n    __self: this\n  }, React.createElement(FormLabel, {\n    className: classes.labelLeftHorizontal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 763\n    },\n    __self: this\n  }, React.createElement(\"code\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 764\n    },\n    __self: this\n  }, \"min=\", '\"', \"6\", '\"'))), React.createElement(GridItem, {\n    xs: 12,\n    sm: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 769\n    },\n    __self: this\n  }, React.createElement(FormLabel, {\n    className: classes.labelHorizontal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 770\n    },\n    __self: this\n  }, \"Max Value\")), React.createElement(GridItem, {\n    xs: 12,\n    sm: 7,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 774\n    },\n    __self: this\n  }, React.createElement(CustomInput, {\n    success: maxValueState === \"success\",\n    error: maxValueState === \"error\",\n    id: \"maxvalue\",\n    formControlProps: {\n      fullWidth: true\n    },\n    inputProps: {\n      onChange: function onChange(event) {\n        if (verifyNumber(event.target.value) && event.target.value <= 6) {\n          setmaxValueState(\"success\");\n        } else {\n          setmaxValueState(\"error\");\n        }\n\n        setmaxValue(event.target.value);\n      },\n      type: \"text\",\n      endAdornment: maxValueState === \"error\" ? React.createElement(InputAdornment, {\n        position: \"end\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 797\n        },\n        __self: this\n      }, React.createElement(Close, {\n        className: classes.danger,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 798\n        },\n        __self: this\n      })) : undefined\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 775\n    },\n    __self: this\n  })), React.createElement(GridItem, {\n    xs: 12,\n    sm: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 806\n    },\n    __self: this\n  }, React.createElement(FormLabel, {\n    className: classes.labelLeftHorizontal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 807\n    },\n    __self: this\n  }, React.createElement(\"code\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 808\n    },\n    __self: this\n  }, \"max=\", '\"', \"6\", '\"')))))), React.createElement(CardFooter, {\n    className: classes.justifyContentCenter,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 816\n    },\n    __self: this\n  }, React.createElement(Button, {\n    color: \"rose\",\n    onClick: rangeClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 817\n    },\n    __self: this\n  }, \"Validate Inputs\")))));\n}","map":{"version":3,"sources":["/home/ngarci12/Desktop/material-dashboard-pro-react-v1/material-dashboard-pro-react-v1/src/views/Forms/ValidationForms.js"],"names":["React","makeStyles","FormControlLabel","FormLabel","Checkbox","InputAdornment","MailOutline","Contacts","Check","Close","GridContainer","GridItem","CustomInput","Button","Card","CardHeader","CardText","CardIcon","CardBody","CardFooter","styles","useStyles","ValidationForms","useState","registerEmail","setregisterEmail","registerEmailState","setregisterEmailState","registerPassword","setregisterPassword","registerPasswordState","setregisterPasswordState","registerConfirmPassword","setregisterConfirmPassword","registerConfirmPasswordState","setregisterConfirmPasswordState","registerCheckbox","setregisterCheckbox","registerCheckboxState","setregisterCheckboxState","loginEmail","setloginEmail","loginEmailState","setloginEmailState","loginPassword","setloginPassword","loginPasswordState","setloginPasswordState","required","setrequired","requiredState","setrequiredState","typeEmail","settypeEmail","typeEmailState","settypeEmailState","number","setnumber","numberState","setnumberState","url","seturl","urlState","seturlState","equalTo","setequalTo","whichEqualTo","setwhichEqualTo","equalToState","setequalToState","minLength","setminLength","minLengthState","setminLengthState","maxLength","setmaxLength","maxLengthState","setmaxLengthState","range","setrange","rangeState","setrangeState","minValue","setminValue","minValueState","setminValueState","maxValue","setmaxValue","maxValueState","setmaxValueState","verifyEmail","value","emailRex","test","verifyLength","length","verifyNumber","numberRex","RegExp","verifyUrl","URL","_","registerClick","loginClick","typeClick","rangeClick","classes","cardIconTitle","fullWidth","onChange","event","target","type","autoComplete","formCategory","checked","checkedIcon","uncheckedIcon","root","checkRoot","label","labelError","registerButton","center","cardTitle","labelHorizontal","endAdornment","danger","undefined","labelLeftHorizontal","justifyContentCenter"],"mappings":"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","sourcesContent":["/*eslint-disable*/\nimport React from \"react\";\n// @material-ui/core components\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\n\n// material ui icons\nimport MailOutline from \"@material-ui/icons/MailOutline\";\nimport Contacts from \"@material-ui/icons/Contacts\";\nimport Check from \"@material-ui/icons/Check\";\nimport Close from \"@material-ui/icons/Close\";\n\n// core components\nimport GridContainer from \"components/Grid/GridContainer.js\";\nimport GridItem from \"components/Grid/GridItem.js\";\nimport CustomInput from \"components/CustomInput/CustomInput.js\";\nimport Button from \"components/CustomButtons/Button.js\";\nimport Card from \"components/Card/Card.js\";\nimport CardHeader from \"components/Card/CardHeader.js\";\nimport CardText from \"components/Card/CardText.js\";\nimport CardIcon from \"components/Card/CardIcon.js\";\nimport CardBody from \"components/Card/CardBody.js\";\nimport CardFooter from \"components/Card/CardFooter.js\";\n\n// style for this view\nimport styles from \"assets/jss/material-dashboard-pro-react/views/validationFormsStyle.js\";\n\nconst useStyles = makeStyles(styles);\n\nexport default function ValidationForms() {\n  // register form\n  const [registerEmail, setregisterEmail] = React.useState(\"\");\n  const [registerEmailState, setregisterEmailState] = React.useState(\"\");\n  const [registerPassword, setregisterPassword] = React.useState(\"\");\n  const [registerPasswordState, setregisterPasswordState] = React.useState(\"\");\n  const [registerConfirmPassword, setregisterConfirmPassword] = React.useState(\n    \"\"\n  );\n  const [\n    registerConfirmPasswordState,\n    setregisterConfirmPasswordState\n  ] = React.useState(\"\");\n  const [registerCheckbox, setregisterCheckbox] = React.useState(false);\n  const [registerCheckboxState, setregisterCheckboxState] = React.useState(\"\");\n  // login form\n  const [loginEmail, setloginEmail] = React.useState(\"\");\n  const [loginEmailState, setloginEmailState] = React.useState(\"\");\n  const [loginPassword, setloginPassword] = React.useState(\"\");\n  const [loginPasswordState, setloginPasswordState] = React.useState(\"\");\n  // type validation\n  const [required, setrequired] = React.useState(\"\");\n  const [requiredState, setrequiredState] = React.useState(\"\");\n  const [typeEmail, settypeEmail] = React.useState(\"\");\n  const [typeEmailState, settypeEmailState] = React.useState(\"\");\n  const [number, setnumber] = React.useState(\"\");\n  const [numberState, setnumberState] = React.useState(\"\");\n  const [url, seturl] = React.useState(\"\");\n  const [urlState, seturlState] = React.useState(\"\");\n  const [equalTo, setequalTo] = React.useState(\"\");\n  const [whichEqualTo, setwhichEqualTo] = React.useState(\"\");\n  const [equalToState, setequalToState] = React.useState(\"\");\n  // range validation\n  const [minLength, setminLength] = React.useState(\"\");\n  const [minLengthState, setminLengthState] = React.useState(\"\");\n  const [maxLength, setmaxLength] = React.useState(\"\");\n  const [maxLengthState, setmaxLengthState] = React.useState(\"\");\n  const [range, setrange] = React.useState(\"\");\n  const [rangeState, setrangeState] = React.useState(\"\");\n  const [minValue, setminValue] = React.useState(\"\");\n  const [minValueState, setminValueState] = React.useState(\"\");\n  const [maxValue, setmaxValue] = React.useState(\"\");\n  const [maxValueState, setmaxValueState] = React.useState(\"\");\n  // function that returns true if value is email, false otherwise\n  const verifyEmail = value => {\n    var emailRex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    if (emailRex.test(value)) {\n      return true;\n    }\n    return false;\n  };\n  // function that verifies if a string has a given length or not\n  const verifyLength = (value, length) => {\n    if (value.length >= length) {\n      return true;\n    }\n    return false;\n  };\n  // function that verifies if value contains only numbers\n  const verifyNumber = value => {\n    var numberRex = new RegExp(\"^[0-9]+$\");\n    if (numberRex.test(value)) {\n      return true;\n    }\n    return false;\n  };\n  // verifies if value is a valid URL\n  const verifyUrl = value => {\n    try {\n      new URL(value);\n      return true;\n    } catch (_) {\n      return false;\n    }\n  };\n  const registerClick = () => {\n    if (registerEmailState === \"\") {\n      setregisterEmailState(\"error\");\n    }\n    if (registerPasswordState === \"\") {\n      setregisterPasswordState(\"error\");\n    }\n    if (registerConfirmPasswordState === \"\") {\n      setregisterConfirmPasswordState(\"error\");\n    }\n    if (registerCheckboxState === \"\") {\n      setregisterCheckboxState(\"error\");\n    }\n  };\n  const loginClick = () => {\n    if (loginEmailState === \"\") {\n      setloginEmailState(\"error\");\n    }\n    if (loginPasswordState === \"\") {\n      setloginPasswordState(\"error\");\n    }\n  };\n  const typeClick = () => {\n    if (requiredState === \"\") {\n      setrequiredState(\"error\");\n    }\n    if (typeEmailState === \"\") {\n      settypeEmailState(\"error\");\n    }\n    if (numberState === \"\") {\n      setnumberState(\"error\");\n    }\n    if (urlState === \"\") {\n      seturlState(\"error\");\n    }\n    if (equalToState === \"\") {\n      setequalToState(\"error\");\n    }\n  };\n  const rangeClick = () => {\n    if (minLengthState === \"\") {\n      setminLengthState(\"error\");\n    }\n    if (maxLengthState === \"\") {\n      setmaxLengthState(\"error\");\n    }\n    if (rangeState === \"\") {\n      setrangeState(\"error\");\n    }\n    if (minValueState === \"\") {\n      setminValueState(\"error\");\n    }\n    if (maxValueState === \"\") {\n      setmaxValueState(\"error\");\n    }\n  };\n  const classes = useStyles();\n  return (\n    <GridContainer>\n      <GridItem xs={12} sm={12} md={6}>\n        <Card>\n          <CardHeader color=\"rose\" icon>\n            <CardIcon color=\"rose\">\n              <MailOutline />\n            </CardIcon>\n            <h4 className={classes.cardIconTitle}>Register Forms</h4>\n          </CardHeader>\n          <CardBody>\n            <form>\n              <CustomInput\n                success={registerEmailState === \"success\"}\n                error={registerEmailState === \"error\"}\n                labelText=\"Email Address *\"\n                id=\"registeremail\"\n                formControlProps={{\n                  fullWidth: true\n                }}\n                inputProps={{\n                  onChange: event => {\n                    if (verifyEmail(event.target.value)) {\n                      setregisterEmailState(\"success\");\n                    } else {\n                      setregisterEmailState(\"error\");\n                    }\n                    setregisterEmail(event.target.value);\n                  },\n                  type: \"email\"\n                }}\n              />\n              <CustomInput\n                success={registerPasswordState === \"success\"}\n                error={registerPasswordState === \"error\"}\n                labelText=\"Password *\"\n                id=\"registerpassword\"\n                formControlProps={{\n                  fullWidth: true\n                }}\n                inputProps={{\n                  onChange: event => {\n                    if (verifyLength(event.target.value, 1)) {\n                      setregisterPasswordState(\"success\");\n                    } else {\n                      setregisterPasswordState(\"error\");\n                    }\n                    setregisterPassword(event.target.value);\n                  },\n                  type: \"password\",\n                  autoComplete: \"off\"\n                }}\n              />\n              <CustomInput\n                success={registerConfirmPasswordState === \"success\"}\n                error={registerConfirmPasswordState === \"error\"}\n                labelText=\"Confirm Password *\"\n                id=\"registerconfirmpassword\"\n                formControlProps={{\n                  fullWidth: true\n                }}\n                inputProps={{\n                  onChange: event => {\n                    if (registerPassword === event.target.value) {\n                      setregisterConfirmPasswordState(\"success\");\n                    } else {\n                      setregisterConfirmPasswordState(\"error\");\n                    }\n                    setregisterConfirmPassword(event.target.value);\n                  },\n                  type: \"password\",\n                  autoComplete: \"off\"\n                }}\n              />\n              <div className={classes.formCategory}>\n                <small>*</small> Required fields\n              </div>\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    tabIndex={-1}\n                    onClick={event => {\n                      if (event.target.checked) {\n                        setregisterCheckboxState(\"success\");\n                      } else {\n                        setregisterCheckboxState(\"error\");\n                      }\n                      setregisterCheckbox(event.target.checked);\n                    }}\n                    checkedIcon={<Check className={classes.checkedIcon} />}\n                    icon={<Check className={classes.uncheckedIcon} />}\n                    classes={{\n                      checked: classes.checked,\n                      root: classes.checkRoot\n                    }}\n                  />\n                }\n                classes={{\n                  label:\n                    classes.label +\n                    (registerCheckboxState === \"error\"\n                      ? \" \" + classes.labelError\n                      : \"\")\n                }}\n                label=\"Subscribe to newsletter\"\n              />\n              <Button\n                color=\"rose\"\n                onClick={registerClick}\n                className={classes.registerButton}\n              >\n                Register\n              </Button>\n            </form>\n          </CardBody>\n        </Card>\n      </GridItem>\n      <GridItem xs={12} sm={12} md={6}>\n        <Card>\n          <CardHeader color=\"rose\" icon>\n            <CardIcon color=\"rose\">\n              <Contacts />\n            </CardIcon>\n            <h4 className={classes.cardIconTitle}>Login Form</h4>\n          </CardHeader>\n          <CardBody>\n            <form>\n              <CustomInput\n                success={loginEmailState === \"success\"}\n                error={loginEmailState === \"error\"}\n                labelText=\"Email Address *\"\n                id=\"loginemail\"\n                formControlProps={{\n                  fullWidth: true\n                }}\n                inputProps={{\n                  onChange: event => {\n                    if (verifyEmail(event.target.value)) {\n                      setloginEmailState(\"success\");\n                    } else {\n                      setloginEmailState(\"error\");\n                    }\n                    setloginEmail(event.target.value);\n                  },\n                  type: \"email\"\n                }}\n              />\n              <CustomInput\n                success={loginPasswordState === \"success\"}\n                error={loginPasswordState === \"error\"}\n                labelText=\"Password *\"\n                id=\"loginpassword\"\n                formControlProps={{\n                  fullWidth: true\n                }}\n                inputProps={{\n                  onChange: event => {\n                    if (verifyLength(event.target.value, 1)) {\n                      setloginPasswordState(\"success\");\n                    } else {\n                      setloginPasswordState(\"error\");\n                    }\n                    setloginPassword(event.target.value);\n                  },\n                  type: \"password\",\n                  autoComplete: \"off\"\n                }}\n              />\n              <div className={classes.formCategory}>\n                <small>*</small> Required fields\n              </div>\n              <div className={classes.center}>\n                <Button color=\"rose\" onClick={loginClick}>\n                  Login\n                </Button>\n              </div>\n            </form>\n          </CardBody>\n        </Card>\n      </GridItem>\n      <GridItem xs={12} sm={12} md={12}>\n        <Card>\n          <CardHeader color=\"rose\" text>\n            <CardText color=\"rose\">\n              <h4 className={classes.cardTitle}>Type Validation</h4>\n            </CardText>\n          </CardHeader>\n          <CardBody>\n            <form>\n              <GridContainer>\n                <GridItem xs={12} sm={2}>\n                  <FormLabel className={classes.labelHorizontal}>\n                    Required Text\n                  </FormLabel>\n                </GridItem>\n                <GridItem xs={12} sm={7}>\n                  <CustomInput\n                    success={requiredState === \"success\"}\n                    error={requiredState === \"error\"}\n                    id=\"required\"\n                    formControlProps={{\n                      fullWidth: true\n                    }}\n                    inputProps={{\n                      onChange: event => {\n                        if (verifyLength(event.target.value, 0)) {\n                          setrequiredState(\"success\");\n                        } else {\n                          setrequiredState(\"error\");\n                        }\n                        setrequired(event.target.value);\n                      },\n                      type: \"text\",\n                      endAdornment:\n                        requiredState === \"error\" ? (\n                          <InputAdornment position=\"end\">\n                            <Close className={classes.danger} />\n                          </InputAdornment>\n                        ) : (\n                          undefined\n                        )\n                    }}\n                  />\n                </GridItem>\n                <GridItem xs={12} sm={3}>\n                  <FormLabel className={classes.labelLeftHorizontal}>\n                    <code>required</code>\n                  </FormLabel>\n                </GridItem>\n              </GridContainer>\n              <GridContainer>\n                <GridItem xs={12} sm={2}>\n                  <FormLabel className={classes.labelHorizontal}>\n                    Email\n                  </FormLabel>\n                </GridItem>\n                <GridItem xs={12} sm={7}>\n                  <CustomInput\n                    success={typeEmailState === \"success\"}\n                    error={typeEmailState === \"error\"}\n                    id=\"typeemail\"\n                    formControlProps={{\n                      fullWidth: true\n                    }}\n                    inputProps={{\n                      onChange: event => {\n                        if (verifyEmail(event.target.value)) {\n                          settypeEmailState(\"success\");\n                        } else {\n                          settypeEmailState(\"error\");\n                        }\n                        settypeEmail(event.target.value);\n                      },\n                      type: \"email\",\n                      endAdornment:\n                        typeEmailState === \"error\" ? (\n                          <InputAdornment position=\"end\">\n                            <Close className={classes.danger} />\n                          </InputAdornment>\n                        ) : (\n                          undefined\n                        )\n                    }}\n                  />\n                </GridItem>\n                <GridItem xs={12} sm={3}>\n                  <FormLabel className={classes.labelLeftHorizontal}>\n                    <code>email</code>\n                  </FormLabel>\n                </GridItem>\n              </GridContainer>\n              <GridContainer>\n                <GridItem xs={12} sm={2}>\n                  <FormLabel className={classes.labelHorizontal}>\n                    Number\n                  </FormLabel>\n                </GridItem>\n                <GridItem xs={12} sm={7}>\n                  <CustomInput\n                    success={numberState === \"success\"}\n                    error={numberState === \"error\"}\n                    id=\"number\"\n                    formControlProps={{\n                      fullWidth: true\n                    }}\n                    inputProps={{\n                      onChange: event => {\n                        if (verifyNumber(event.target.value)) {\n                          setnumberState(\"success\");\n                        } else {\n                          setnumberState(\"error\");\n                        }\n                        setnumber(event.target.value);\n                      },\n                      type: \"number\",\n                      endAdornment:\n                        numberState === \"error\" ? (\n                          <InputAdornment position=\"end\">\n                            <Close className={classes.danger} />\n                          </InputAdornment>\n                        ) : (\n                          undefined\n                        )\n                    }}\n                  />\n                </GridItem>\n                <GridItem xs={12} sm={3}>\n                  <FormLabel className={classes.labelLeftHorizontal}>\n                    <code>number</code>\n                  </FormLabel>\n                </GridItem>\n              </GridContainer>\n              <GridContainer>\n                <GridItem xs={12} sm={2}>\n                  <FormLabel className={classes.labelHorizontal}>Url</FormLabel>\n                </GridItem>\n                <GridItem xs={12} sm={7}>\n                  <CustomInput\n                    success={urlState === \"success\"}\n                    error={urlState === \"error\"}\n                    id=\"url\"\n                    formControlProps={{\n                      fullWidth: true\n                    }}\n                    inputProps={{\n                      onChange: event => {\n                        if (verifyUrl(event.target.value)) {\n                          seturlState(\"success\");\n                        } else {\n                          seturlState(\"error\");\n                        }\n                        seturl(event.target.value);\n                      },\n                      type: \"text\",\n                      endAdornment:\n                        urlState === \"error\" ? (\n                          <InputAdornment position=\"end\">\n                            <Close className={classes.danger} />\n                          </InputAdornment>\n                        ) : (\n                          undefined\n                        )\n                    }}\n                  />\n                </GridItem>\n                <GridItem xs={12} sm={3}>\n                  <FormLabel className={classes.labelLeftHorizontal}>\n                    <code>url</code>\n                  </FormLabel>\n                </GridItem>\n              </GridContainer>\n              <GridContainer>\n                <GridItem xs={12} sm={2}>\n                  <FormLabel className={classes.labelHorizontal}>\n                    Equal to\n                  </FormLabel>\n                </GridItem>\n                <GridItem xs={12} sm={3}>\n                  <CustomInput\n                    success={equalToState === \"success\"}\n                    error={equalToState === \"error\"}\n                    id=\"equalto\"\n                    formControlProps={{\n                      fullWidth: true\n                    }}\n                    inputProps={{\n                      onChange: event => setequalTo(event.target.value),\n                      type: \"text\",\n                      endAdornment:\n                        equalToState === \"error\" ? (\n                          <InputAdornment position=\"end\">\n                            <Close className={classes.danger} />\n                          </InputAdornment>\n                        ) : (\n                          undefined\n                        )\n                    }}\n                  />\n                </GridItem>\n                <GridItem xs={12} sm={3}>\n                  <CustomInput\n                    success={equalToState === \"success\"}\n                    error={equalToState === \"error\"}\n                    id=\"whichequalto\"\n                    formControlProps={{\n                      fullWidth: true\n                    }}\n                    inputProps={{\n                      onChange: event => {\n                        if (equalTo === event.target.value) {\n                          setequalToState(\"success\");\n                        } else {\n                          setequalToState(\"error\");\n                        }\n                        setwhichEqualTo(event.target.value);\n                      },\n                      type: \"text\",\n                      endAdornment:\n                        equalToState === \"error\" ? (\n                          <InputAdornment position=\"end\">\n                            <Close className={classes.danger} />\n                          </InputAdornment>\n                        ) : (\n                          undefined\n                        )\n                    }}\n                  />\n                </GridItem>\n                <GridItem xs={12} sm={3}>\n                  <FormLabel className={classes.labelLeftHorizontal}>\n                    <code>equalTo</code>\n                  </FormLabel>\n                </GridItem>\n              </GridContainer>\n            </form>\n          </CardBody>\n          <CardFooter className={classes.justifyContentCenter}>\n            <Button color=\"rose\" onClick={typeClick}>\n              Validate Inputs\n            </Button>\n          </CardFooter>\n        </Card>\n      </GridItem>\n      <GridItem xs={12} sm={12} md={12}>\n        <Card>\n          <CardHeader color=\"rose\" text>\n            <CardText color=\"rose\">\n              <h4 className={classes.cardTitle}>Range Validation</h4>\n            </CardText>\n          </CardHeader>\n          <CardBody>\n            <form>\n              <GridContainer>\n                <GridItem xs={12} sm={2}>\n                  <FormLabel className={classes.labelHorizontal}>\n                    Min Length\n                  </FormLabel>\n                </GridItem>\n                <GridItem xs={12} sm={7}>\n                  <CustomInput\n                    success={minLengthState === \"success\"}\n                    error={minLengthState === \"error\"}\n                    id=\"minlength\"\n                    formControlProps={{\n                      fullWidth: true\n                    }}\n                    inputProps={{\n                      onChange: event => {\n                        if (verifyLength(event.target.value, 5)) {\n                          setminLengthState(\"success\");\n                        } else {\n                          setminLengthState(\"error\");\n                        }\n                        setminLength(event.target.value);\n                      },\n                      type: \"text\",\n                      endAdornment:\n                        minLengthState === \"error\" ? (\n                          <InputAdornment position=\"end\">\n                            <Close className={classes.danger} />\n                          </InputAdornment>\n                        ) : (\n                          undefined\n                        )\n                    }}\n                  />\n                </GridItem>\n                <GridItem xs={12} sm={3}>\n                  <FormLabel className={classes.labelLeftHorizontal}>\n                    <code>\n                      minLength={'\"'}5{'\"'}\n                    </code>\n                  </FormLabel>\n                </GridItem>\n                <GridItem xs={12} sm={2}>\n                  <FormLabel className={classes.labelHorizontal}>\n                    Max Length\n                  </FormLabel>\n                </GridItem>\n                <GridItem xs={12} sm={7}>\n                  <CustomInput\n                    success={maxLengthState === \"success\"}\n                    error={maxLengthState === \"error\"}\n                    id=\"maxlength\"\n                    formControlProps={{\n                      fullWidth: true\n                    }}\n                    inputProps={{\n                      onChange: event => {\n                        if (!verifyLength(event.target.value, 6)) {\n                          setmaxLengthState(\"success\");\n                        } else {\n                          setmaxLengthState(\"error\");\n                        }\n                        setmaxLength(event.target.value);\n                      },\n                      type: \"text\",\n                      endAdornment:\n                        maxLengthState === \"error\" ? (\n                          <InputAdornment position=\"end\">\n                            <Close className={classes.danger} />\n                          </InputAdornment>\n                        ) : (\n                          undefined\n                        )\n                    }}\n                  />\n                </GridItem>\n                <GridItem xs={12} sm={3}>\n                  <FormLabel className={classes.labelLeftHorizontal}>\n                    <code>\n                      maxLength={'\"'}5{'\"'}\n                    </code>\n                  </FormLabel>\n                </GridItem>\n                <GridItem xs={12} sm={2}>\n                  <FormLabel className={classes.labelHorizontal}>\n                    Range\n                  </FormLabel>\n                </GridItem>\n                <GridItem xs={12} sm={7}>\n                  <CustomInput\n                    success={rangeState === \"success\"}\n                    error={rangeState === \"error\"}\n                    id=\"range\"\n                    formControlProps={{\n                      fullWidth: true\n                    }}\n                    inputProps={{\n                      onChange: event => {\n                        if (\n                          verifyNumber(event.target.value) &&\n                          event.target.value >= 6 &&\n                          event.target.value <= 10\n                        ) {\n                          setrangeState(\"success\");\n                        } else {\n                          setrangeState(\"error\");\n                        }\n                        setrange(event.target.value);\n                      },\n                      type: \"text\",\n                      endAdornment:\n                        rangeState === \"error\" ? (\n                          <InputAdornment position=\"end\">\n                            <Close className={classes.danger} />\n                          </InputAdornment>\n                        ) : (\n                          undefined\n                        )\n                    }}\n                  />\n                </GridItem>\n                <GridItem xs={12} sm={3}>\n                  <FormLabel className={classes.labelLeftHorizontal}>\n                    <code>\n                      range={'\"'}[6,10]{'\"'}\n                    </code>\n                  </FormLabel>\n                </GridItem>\n                <GridItem xs={12} sm={2}>\n                  <FormLabel className={classes.labelHorizontal}>\n                    Min Value\n                  </FormLabel>\n                </GridItem>\n                <GridItem xs={12} sm={7}>\n                  <CustomInput\n                    success={minValueState === \"success\"}\n                    error={minValueState === \"error\"}\n                    id=\"minvalue\"\n                    formControlProps={{\n                      fullWidth: true\n                    }}\n                    inputProps={{\n                      onChange: event => {\n                        if (\n                          verifyNumber(event.target.value) &&\n                          event.target.value >= 6\n                        ) {\n                          setminValueState(\"success\");\n                        } else {\n                          setminValueState(\"error\");\n                        }\n                        setminValue(event.target.value);\n                      },\n                      type: \"text\",\n                      endAdornment:\n                        minValueState === \"error\" ? (\n                          <InputAdornment position=\"end\">\n                            <Close className={classes.danger} />\n                          </InputAdornment>\n                        ) : (\n                          undefined\n                        )\n                    }}\n                  />\n                </GridItem>\n                <GridItem xs={12} sm={3}>\n                  <FormLabel className={classes.labelLeftHorizontal}>\n                    <code>\n                      min={'\"'}6{'\"'}\n                    </code>\n                  </FormLabel>\n                </GridItem>\n                <GridItem xs={12} sm={2}>\n                  <FormLabel className={classes.labelHorizontal}>\n                    Max Value\n                  </FormLabel>\n                </GridItem>\n                <GridItem xs={12} sm={7}>\n                  <CustomInput\n                    success={maxValueState === \"success\"}\n                    error={maxValueState === \"error\"}\n                    id=\"maxvalue\"\n                    formControlProps={{\n                      fullWidth: true\n                    }}\n                    inputProps={{\n                      onChange: event => {\n                        if (\n                          verifyNumber(event.target.value) &&\n                          event.target.value <= 6\n                        ) {\n                          setmaxValueState(\"success\");\n                        } else {\n                          setmaxValueState(\"error\");\n                        }\n                        setmaxValue(event.target.value);\n                      },\n                      type: \"text\",\n                      endAdornment:\n                        maxValueState === \"error\" ? (\n                          <InputAdornment position=\"end\">\n                            <Close className={classes.danger} />\n                          </InputAdornment>\n                        ) : (\n                          undefined\n                        )\n                    }}\n                  />\n                </GridItem>\n                <GridItem xs={12} sm={3}>\n                  <FormLabel className={classes.labelLeftHorizontal}>\n                    <code>\n                      max={'\"'}6{'\"'}\n                    </code>\n                  </FormLabel>\n                </GridItem>\n              </GridContainer>\n            </form>\n          </CardBody>\n          <CardFooter className={classes.justifyContentCenter}>\n            <Button color=\"rose\" onClick={rangeClick}>\n              Validate Inputs\n            </Button>\n          </CardFooter>\n        </Card>\n      </GridItem>\n    </GridContainer>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}